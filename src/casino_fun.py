import discord
from discord.ui import Button, View
from discord.ext import commands
import sqlite3
import os
import random
import asyncio

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATABASE_PATH = os.path.join(BASE_DIR, "models", "database.db")

db_connection = sqlite3.connect(DATABASE_PATH)

async def get_user_score(user_id):
    cursor = db_connection.cursor()
    cursor.execute("SELECT score_points FROM users WHERE discord_id = ?", (user_id,))
    row = cursor.fetchone()

    if row:
        return row[0]
    return 0

def update_user_score(user_id, amount):
    cursor = db_connection.cursor()
    cursor.execute("UPDATE users SET score_points = score_points + ? WHERE discord_id = ?", (amount, user_id))
    db_connection.commit()

async def casino(ctx, game, bet):

    user_id = ctx.author.id
    score_points = await get_user_score(user_id)

    try:
        if game is None and bet is None:
            casino_help = discord.Embed(
                title="–í—ñ—Ç–∞—é —É –∫—É—Ç–æ—á–∫—É –≥–µ–º–±–ª—ñ–Ω–≥—É. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –≤–∏–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Å–≤–æ—é —É–¥–∞—á—É)",
                description=
                "**.casino <game_name> <bet>** - –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, —â–æ –≤–∏–∫–ª–∏–∫–∞—î –ø–µ–≤–Ω—É –≥—Ä—É `<game_name>` —ñ–∑ –≤–∫–∞–∑–∞–Ω–æ—é —Å—Ç–∞–≤–∫–æ—é `<bet>`\n\n"
                "\n**–Ü–ì–†–ò**\n"
                """
                **slot** - –°–ª–æ—Ç–∏ :slot_machine: –ö—Ä—É—Ç–∏ –±–∞—Ä–∞–±–∞–Ω–∏ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–π–≥—Ä–∞—à–∫—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤!
                
                **–ö–û–ú–ë–Ü–ù–ê–¶–Ü–á:**
                
                :seven::seven::seven: - x20
                
                :gem::gem::gem: - x10
                
                :lemon::lemon::lemon: - x5
                
                :grapes::grapes::grapes: - x3
                
                :cherries::cherries::cherries: - x2
                
                :lemon::lemon::cherries: - x1\n
                """
                """
                **roulette** - –†—É–ª–µ—Ç–∫–∞ :black_circle: :red_circle: . –í–≥–∞–¥–∞–π —è–∫–∏–π –∫–æ–ª—ñ—Ä –≤–∏–ø–∞–¥–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–º!
                
                **–ö–û–õ–¨–û–†–ò:**
                
                :black_circle: - x2
                
                :red_circle: - x2
                
                :green_circle: - x14
                """,
                color=discord.Color.blurple()
            )
            await ctx.send(embed=casino_help)
        elif game == "slot" and bet is not None:
            if bet <= 0:
                await ctx.send("–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.")
            elif score_points < bet:
                await ctx.send("–í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–º–∞–ª–∏–π –¥–ª—è —Ç–∞–∫–æ—ó —Å—Ç–∞–≤–∫–∏")
            else:
                await slots_game(ctx, bet)
        elif game == "roulette" and bet is not None:
            if bet <= 0:
                await ctx.send("–°—Ç–∞–≤–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ –Ω—É–ª—å.")
            elif score_points < bet:
                await ctx.send("–í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–º–∞–ª–∏–π –¥–ª—è —Ç–∞–∫–æ—ó —Å—Ç–∞–≤–∫–∏")
            else:
                await roulette_game(ctx, bet)
    except:
        await ctx.send("–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≥—Ä–∏ –∞–±–æ —Å—Ç–∞–≤–∫–∏")


active_users = {}

async def check_if_active(ctx):
    user_id = ctx.author.id

    if user_id in active_users:
        await ctx.send("–í–∏ –≤–∂–µ –≥—Ä–∞—î—Ç–µ, –ø–æ—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è!")
        return False

    active_users[user_id] = True

    return True


async def slots_game(ctx, bet: int):
    if not await check_if_active(ctx):
        return

    symbols = ["üçí", "üçã", "üçá", "üíé", "7Ô∏è‚É£"]
    weights = [50, 30, 10, 5, 5]
    slots = ["", "", ""]


    def weighted_random(symbols, weights):
        return random.choices(symbols, weights, k=1)[0]


    def check_win(slots):
        if slots[0] == slots[1] == slots[2]:
            if slots[0] == "7Ô∏è‚É£":
                update_user_score(ctx.author.id, bet * 20)
                return f"–í–∏–≥—Ä–∞—à! {slots[0]} x20"
            elif slots[0] == "üíé":
                update_user_score(ctx.author.id, bet * 10)
                return f"–í–∏–≥—Ä–∞—à! {slots[0]} x10"
            elif slots[0] == "üçã":
                update_user_score(ctx.author.id, bet * 5)
                return f"–í–∏–≥—Ä–∞—à! {slots[0]} x5"
            elif slots[0] == "üçá":
                update_user_score(ctx.author.id, bet * 3)
                return f"–í–∏–≥—Ä–∞—à! {slots[0]} x3"
            elif slots[0] == "üçí":
                update_user_score(ctx.author.id, bet * 2)
                return f"–í–∏–≥—Ä–∞—à! {slots[0]} x2"
        elif slots.count("üçí") == 1 and len(set(slots)) == 2:
            return f"–í–∏–≥—Ä–∞—à! üçí –¥–∞—î x1"
        else:
            cursor = db_connection.cursor()
            cursor.execute("UPDATE users SET score_points = score_points - ? WHERE discord_id = ?",
                           (bet, ctx.author.id))
            db_connection.commit()
            return f"–ù–µ–º–∞—î –≤–∏–≥—Ä–∞—à—É"

    message = await ctx.channel.send("üé∞ –û–±–µ—Ä—Ç–∞–Ω–Ω—è —Å–ª–æ—Ç—ñ–≤...")

    num_spins = 4
    final_result = []

    for _ in range(num_spins):
        for i in range(len(slots)):
            slots[i] = random.choice(symbols)
        await message.edit(content=f"üé∞ {' | '.join(slots)}")
        await asyncio.sleep(0.3)

    final_result = [weighted_random(symbols, weights) for _ in range(3)]
    result = check_win(final_result)

    score_points = await get_user_score(ctx.author.id)
    await message.edit(content=f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {' | '.join(final_result)}\n{result + " | –í–∞—à –±–∞–ª–∞–Ω—Å - "}{score_points}")

    await asyncio.sleep(1.55)
    del active_users[ctx.author.id]


class ColorButtons(View):
    def __init__(self, author_id):
        super().__init__()
        self.value = None
        self.author_id = author_id

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author_id:
            return False
        return True


    @discord.ui.button(label="‚ö´ Black", style=discord.ButtonStyle.primary)
    async def black_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.result = "‚ö´"
        await interaction.response.send_message(f"–í–∏ –æ–±—Ä–∞–ª–∏ {self.result}. –†—É–ª–µ—Ç–∫–∞ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è...")
        self.stop()

    @discord.ui.button(label="üî¥ Red", style=discord.ButtonStyle.primary)
    async def red_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.result = "üî¥"
        await interaction.response.send_message(f"–í–∏ –æ–±—Ä–∞–ª–∏ {self.result}. –†—É–ª–µ—Ç–∫–∞ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è...")
        self.stop()

    @discord.ui.button(label="üü¢ Green", style=discord.ButtonStyle.primary)
    async def green_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.result = "üü¢"
        await interaction.response.send_message(f"–í–∏ –æ–±—Ä–∞–ª–∏ {self.result}. –†—É–ª–µ—Ç–∫–∞ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è...")
        self.stop()


async def roulette_game(ctx, bet: int):
    if not await check_if_active(ctx):
        return

    view = ColorButtons(author_id=ctx.author.id)

    embed = discord.Embed(title="–ù–∞ —è–∫–∏–π –∫–æ–ª—ñ—Ä –ø–æ—Å—Ç–∞–≤–∏—à?")
    await ctx.channel.send(embed=embed, view=view)

    await view.wait()

    if view.result is None:
        await ctx.send("–ß–∞—Å –≤–∏–±–æ—Ä—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return


    symbols = ["‚ö´", "üî¥", "üü¢"]
    weights = [50, 50, 10]

    def weighted_random(symbols, weights):
        return random.choices(symbols, weights, k=1)[0]

    result = weighted_random(symbols, weights)

    green_gifs = [os.path.join(BASE_DIR, "assets", "Roulette_wheel_green.gif")]
    red_gifs = [os.path.join(BASE_DIR, "assets", 'Roulette_wheel_red_1.gif'), os.path.join(BASE_DIR, "assets", 'Roulette_wheel_red_2.gif'), os.path.join(BASE_DIR, "assets", 'Roulette_wheel_red_3.gif')]
    black_gifs = [os.path.join(BASE_DIR, "assets", 'Roulette_wheel_black_1.gif'), os.path.join(BASE_DIR, "assets", 'Roulette_wheel_black_2.gif'), os.path.join(BASE_DIR, "assets", 'Roulette_wheel_black_3.gif')]

    def get_random_gif(result):
        if result == "üü¢":
            return random.choice(green_gifs)
        elif result == "üî¥":
            return random.choice(red_gifs)
        elif result == "‚ö´":
            return random.choice(black_gifs)
        else:
            return None

    def check_win(result):
        if view.result == result:
            if result == "‚ö´" or "üî¥":
                update_user_score(ctx.author.id, bet * 2)
                return f"–í–∏–≥—Ä–∞—à! {result} x2"
            elif result == "üü¢":
                update_user_score(ctx.author.id, bet * 14)
                return f"–í–∏–≥—Ä–∞—à! {result} x14"
        else:
            cursor = db_connection.cursor()
            cursor.execute("UPDATE users SET score_points = score_points - ? WHERE discord_id = ?",
                           (bet, ctx.author.id))
            db_connection.commit()
            return f"–ù–∞–∂–∞–ª—å –≤–∏ –ø–æ–º–∏–ª–∏–ª–∏—Å—å. –ö—É–ª—å–∫–∞ –≤–∏–ø–∞–ª–∞ –Ω–∞ {result}"


    gif_path = get_random_gif(result)

    try:
        await ctx.send("",file=discord.File(gif_path))

        await asyncio.sleep(5.3)

        res_message = check_win(result)

        score_points = await get_user_score(ctx.author.id)
        await ctx.send(f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {res_message} | –í–∞—à –±–∞–ª–∞–Ω—Å - {score_points}")

    except Exception as e:
        await ctx.send(e)


    await asyncio.sleep(1.55)
    del active_users[ctx.author.id]
